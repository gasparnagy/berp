// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Berp (http://https://github.com/gasparnagy/berp/).
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using System;
using System.Collections.Generic;
namespace Berp.BerpGrammar
{
    public enum TokenType
    {
        None,
        EOF,
        Rule,
        Token,
        EOL,
        Production,
        Definition,
        LParen,
        RParen,
        LBracket,
        RBracket,
        Arrow,
        AlternateOp,
        AnyMultiplier,
        OneOrMoreMultiplier,
        OneOrZeroMultiplier,
        Comma,
        Number,
        Other,
    }

    public enum RuleType
    {
        None,
        _EOF, // #EOF
        _Rule, // #Rule
        _Token, // #Token
        _EOL, // #EOL
        _Production, // #Production
        _Definition, // #Definition
        _LParen, // #LParen
        _RParen, // #RParen
        _LBracket, // #LBracket
        _RBracket, // #RBracket
        _Arrow, // #Arrow
        _AlternateOp, // #AlternateOp
        _AnyMultiplier, // #AnyMultiplier
        _OneOrMoreMultiplier, // #OneOrMoreMultiplier
        _OneOrZeroMultiplier, // #OneOrZeroMultiplier
        _Comma, // #Comma
        _Number, // #Number
        _Other, // #Other
        Grammar, // Grammar! := Settings? RuleDefinition+
        RuleDefinition, // RuleDefinition! := #Rule #Production? LookAhead? #Definition RuleDefinitionElement+ #EOL
        RuleDefinitionElement, // RuleDefinitionElement! := RuleDefinitionElement_Core RuleDefinitionElement_Multiplier?
        RuleDefinitionElement_Core, // RuleDefinitionElement_Core := (AlternateElement | TokenElement | RuleElement | GroupElement)
        RuleDefinitionElement_Multiplier, // RuleDefinitionElement_Multiplier := (#AnyMultiplier | #OneOrMoreMultiplier | #OneOrZeroMultiplier)
        AlternateElement, // AlternateElement! [#Token|#Rule->#AlternateOp] := #LParen AlternateElementBody #RParen
        AlternateElementBody, // AlternateElementBody := AlternateElementItem (#AlternateOp AlternateElementItem)*
        AlternateElementItem, // AlternateElementItem := (#Rule | #Token)
        GroupElement, // GroupElement! := #LParen RuleDefinitionElement+ #RParen
        TokenElement, // TokenElement := #Token
        RuleElement, // RuleElement := #Rule
        LookAhead, // LookAhead! := #LBracket LookAheadTokenList1? #Arrow LookAheadTokenList2? #RBracket
        LookAheadTokenList1, // LookAheadTokenList1! := #Token (#AlternateOp #Token)*
        LookAheadTokenList2, // LookAheadTokenList2! := #Token (#AlternateOp #Token)*
        Settings, // Settings! := (#LBracket #EOL) Parameter* (#RBracket #EOL)
        Parameter, // Parameter! := #Rule #Arrow ParameterValue (#Comma ParameterValue)* #EOL
        ParameterValue, // ParameterValue := (#Rule | #Token | #Number)
    }

    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class Parser<T>
    {
        private readonly IAstBuilder<T> astBuilder;

        public Parser()
            : this(new AstBuilder<T>())
        {
        }

        public Parser(IAstBuilder<T> astBuilder)
        {
            this.astBuilder = astBuilder;
        }

        public bool StopAtFirstError { get; set;}

        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        protected class ParserContext
        {
            public ITokenScanner TokenScanner { get; set; }
            public ITokenMatcher TokenMatcher { get; set; }
            public Queue<Token> TokenQueue { get; set; }
            public List<ParserException> Errors { get; set; }
        }

        public T Parse(ITokenScanner tokenScanner)
        {
            return Parse(tokenScanner, new TokenMatcher());
        }

        public T Parse(ITokenScanner tokenScanner, ITokenMatcher tokenMatcher)
        {
            tokenMatcher.Reset();
            astBuilder.Reset();
            var context = new ParserContext
            {
                TokenScanner = tokenScanner,
                TokenMatcher = tokenMatcher,
                TokenQueue = new Queue<Token>(),
                Errors = new List<ParserException>()
            };

            StartRule(context, RuleType.Grammar);
            int state = 0;
            Token token;
            do
            {
                token = ReadToken(context);
                state = MatchToken(state, token, context);
            } while(!token.IsEOF);

            EndRule(context, RuleType.Grammar);

            if (context.Errors.Count > 0)
            {
                throw new CompositeParserException(context.Errors.ToArray());
            }

            return GetResult(context);
        }

        private void AddError(ParserContext context, ParserException error)
        {
            context.Errors.Add(error);
            if (context.Errors.Count >= 10)
                throw new CompositeParserException(context.Errors.ToArray());
        }

        private void HandleAstError(ParserContext context, Action action)
        {
            HandleExternalError(context, () => { action(); return true; });
        }

        private T HandleExternalError<T>(ParserContext context, Func<T> action, T defaultValue = default(T))
        {
            if (StopAtFirstError)
            {
                return action();
            }

            try
            {
                return action();
            }
            catch (CompositeParserException compositeParserException)
            {
                foreach (var error in compositeParserException.Errors)
                    AddError(context, error);
            }
            catch (ParserException error)
            {
                AddError(context, error);
            }
            return defaultValue;
        }

        void Build(ParserContext context, Token token)
        {
            HandleAstError(context, () => this.astBuilder.Build(token));
        }

        void StartRule(ParserContext context, RuleType ruleType)
        {
            HandleAstError(context, () => this.astBuilder.StartRule(ruleType));
        }

        void EndRule(ParserContext context, RuleType ruleType)
        {
            HandleAstError(context, () => this.astBuilder.EndRule(ruleType));
        }

        T GetResult(ParserContext context)
        {
            return this.astBuilder.GetResult();
        }

        Token ReadToken(ParserContext context)
        {
            return context.TokenQueue.Count > 0 ? context.TokenQueue.Dequeue() : context.TokenScanner.Read();
        }


        bool Match_EOF(ParserContext context, Token token)
        {
            return HandleExternalError(context, () => context.TokenMatcher.Match_EOF(token), false); 
        }
        bool Match_Rule(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return HandleExternalError(context, () => context.TokenMatcher.Match_Rule(token), false); 
        }
        bool Match_Token(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return HandleExternalError(context, () => context.TokenMatcher.Match_Token(token), false); 
        }
        bool Match_EOL(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return HandleExternalError(context, () => context.TokenMatcher.Match_EOL(token), false); 
        }
        bool Match_Production(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return HandleExternalError(context, () => context.TokenMatcher.Match_Production(token), false); 
        }
        bool Match_Definition(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return HandleExternalError(context, () => context.TokenMatcher.Match_Definition(token), false); 
        }
        bool Match_LParen(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return HandleExternalError(context, () => context.TokenMatcher.Match_LParen(token), false); 
        }
        bool Match_RParen(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return HandleExternalError(context, () => context.TokenMatcher.Match_RParen(token), false); 
        }
        bool Match_LBracket(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return HandleExternalError(context, () => context.TokenMatcher.Match_LBracket(token), false); 
        }
        bool Match_RBracket(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return HandleExternalError(context, () => context.TokenMatcher.Match_RBracket(token), false); 
        }
        bool Match_Arrow(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return HandleExternalError(context, () => context.TokenMatcher.Match_Arrow(token), false); 
        }
        bool Match_AlternateOp(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return HandleExternalError(context, () => context.TokenMatcher.Match_AlternateOp(token), false); 
        }
        bool Match_AnyMultiplier(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return HandleExternalError(context, () => context.TokenMatcher.Match_AnyMultiplier(token), false); 
        }
        bool Match_OneOrMoreMultiplier(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return HandleExternalError(context, () => context.TokenMatcher.Match_OneOrMoreMultiplier(token), false); 
        }
        bool Match_OneOrZeroMultiplier(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return HandleExternalError(context, () => context.TokenMatcher.Match_OneOrZeroMultiplier(token), false); 
        }
        bool Match_Comma(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return HandleExternalError(context, () => context.TokenMatcher.Match_Comma(token), false); 
        }
        bool Match_Number(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return HandleExternalError(context, () => context.TokenMatcher.Match_Number(token), false); 
        }
        bool Match_Other(ParserContext context, Token token)
        {
            if (token.IsEOF) return false;
            return HandleExternalError(context, () => context.TokenMatcher.Match_Other(token), false); 
        }
        protected virtual int MatchToken(int state, Token token, ParserContext context)
        {
            int newState;
            switch(state)
            {
                case 0:
                    newState = MatchTokenAt_0(token, context);
                    break;
                case 1:
                    newState = MatchTokenAt_1(token, context);
                    break;
                case 2:
                    newState = MatchTokenAt_2(token, context);
                    break;
                case 3:
                    newState = MatchTokenAt_3(token, context);
                    break;
                case 4:
                    newState = MatchTokenAt_4(token, context);
                    break;
                case 5:
                    newState = MatchTokenAt_5(token, context);
                    break;
                case 6:
                    newState = MatchTokenAt_6(token, context);
                    break;
                case 7:
                    newState = MatchTokenAt_7(token, context);
                    break;
                case 8:
                    newState = MatchTokenAt_8(token, context);
                    break;
                case 9:
                    newState = MatchTokenAt_9(token, context);
                    break;
                case 10:
                    newState = MatchTokenAt_10(token, context);
                    break;
                case 11:
                    newState = MatchTokenAt_11(token, context);
                    break;
                case 12:
                    newState = MatchTokenAt_12(token, context);
                    break;
                case 13:
                    newState = MatchTokenAt_13(token, context);
                    break;
                case 14:
                    newState = MatchTokenAt_14(token, context);
                    break;
                case 15:
                    newState = MatchTokenAt_15(token, context);
                    break;
                case 16:
                    newState = MatchTokenAt_16(token, context);
                    break;
                case 17:
                    newState = MatchTokenAt_17(token, context);
                    break;
                case 18:
                    newState = MatchTokenAt_18(token, context);
                    break;
                case 19:
                    newState = MatchTokenAt_19(token, context);
                    break;
                case 20:
                    newState = MatchTokenAt_20(token, context);
                    break;
                case 21:
                    newState = MatchTokenAt_21(token, context);
                    break;
                case 22:
                    newState = MatchTokenAt_22(token, context);
                    break;
                case 23:
                    newState = MatchTokenAt_23(token, context);
                    break;
                case 24:
                    newState = MatchTokenAt_24(token, context);
                    break;
                case 25:
                    newState = MatchTokenAt_25(token, context);
                    break;
                case 26:
                    newState = MatchTokenAt_26(token, context);
                    break;
                case 27:
                    newState = MatchTokenAt_27(token, context);
                    break;
                case 28:
                    newState = MatchTokenAt_28(token, context);
                    break;
                case 29:
                    newState = MatchTokenAt_29(token, context);
                    break;
                case 30:
                    newState = MatchTokenAt_30(token, context);
                    break;
                case 31:
                    newState = MatchTokenAt_31(token, context);
                    break;
                case 32:
                    newState = MatchTokenAt_32(token, context);
                    break;
                case 33:
                    newState = MatchTokenAt_33(token, context);
                    break;
                case 34:
                    newState = MatchTokenAt_34(token, context);
                    break;
                case 35:
                    newState = MatchTokenAt_35(token, context);
                    break;
                case 36:
                    newState = MatchTokenAt_36(token, context);
                    break;
                case 37:
                    newState = MatchTokenAt_37(token, context);
                    break;
                case 38:
                    newState = MatchTokenAt_38(token, context);
                    break;
                case 39:
                    newState = MatchTokenAt_39(token, context);
                    break;
                case 40:
                    newState = MatchTokenAt_40(token, context);
                    break;
                case 41:
                    newState = MatchTokenAt_41(token, context);
                    break;
                case 42:
                    newState = MatchTokenAt_42(token, context);
                    break;
                case 44:
                    newState = MatchTokenAt_44(token, context);
                    break;
                case 45:
                    newState = MatchTokenAt_45(token, context);
                    break;
                case 46:
                    newState = MatchTokenAt_46(token, context);
                    break;
                case 47:
                    newState = MatchTokenAt_47(token, context);
                    break;
                case 48:
                    newState = MatchTokenAt_48(token, context);
                    break;
                case 49:
                    newState = MatchTokenAt_49(token, context);
                    break;
                case 50:
                    newState = MatchTokenAt_50(token, context);
                    break;
                case 51:
                    newState = MatchTokenAt_51(token, context);
                    break;
                default:
                    throw new InvalidOperationException("Unknown state: " + state);
            }
            return newState;
        }


        // Start
        int MatchTokenAt_0(Token token, ParserContext context)
        {
            if (Match_LBracket(context, token))
            {
                StartRule(context, RuleType.Settings);
                Build(context, token);
                return 1;
            }
            if (Match_Rule(context, token))
            {
                StartRule(context, RuleType.RuleDefinition);
                Build(context, token);
                return 10;
            }

            const string stateComment = "State: 0 - Start";
            token.Detach();
            var expectedTokens = new string[] {"#LBracket", "#Rule"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 0;
        }
        
        // Grammar:0>Settings:0>__grp6:0>#LBracket:0
        int MatchTokenAt_1(Token token, ParserContext context)
        {
            if (Match_EOL(context, token))
            {
                Build(context, token);
                return 2;
            }

            const string stateComment = "State: 1 - Grammar:0>Settings:0>__grp6:0>#LBracket:0";
            token.Detach();
            var expectedTokens = new string[] {"#EOL"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 1;
        }
        
        // Grammar:0>Settings:0>__grp6:1>#EOL:0
        int MatchTokenAt_2(Token token, ParserContext context)
        {
            if (Match_Rule(context, token))
            {
                StartRule(context, RuleType.Parameter);
                Build(context, token);
                return 3;
            }
            if (Match_RBracket(context, token))
            {
                Build(context, token);
                return 8;
            }

            const string stateComment = "State: 2 - Grammar:0>Settings:0>__grp6:1>#EOL:0";
            token.Detach();
            var expectedTokens = new string[] {"#Rule", "#RBracket"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 2;
        }
        
        // Grammar:0>Settings:1>Parameter:0>#Rule:0
        int MatchTokenAt_3(Token token, ParserContext context)
        {
            if (Match_Arrow(context, token))
            {
                Build(context, token);
                return 4;
            }

            const string stateComment = "State: 3 - Grammar:0>Settings:1>Parameter:0>#Rule:0";
            token.Detach();
            var expectedTokens = new string[] {"#Arrow"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 3;
        }
        
        // Grammar:0>Settings:1>Parameter:1>#Arrow:0
        int MatchTokenAt_4(Token token, ParserContext context)
        {
            if (Match_Rule(context, token))
            {
                Build(context, token);
                return 5;
            }
            if (Match_Token(context, token))
            {
                Build(context, token);
                return 5;
            }
            if (Match_Number(context, token))
            {
                Build(context, token);
                return 5;
            }

            const string stateComment = "State: 4 - Grammar:0>Settings:1>Parameter:1>#Arrow:0";
            token.Detach();
            var expectedTokens = new string[] {"#Rule", "#Token", "#Number"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 4;
        }
        
        // Grammar:0>Settings:1>Parameter:2>ParameterValue:0>__alt9:0>#Rule:0
        int MatchTokenAt_5(Token token, ParserContext context)
        {
            if (Match_Comma(context, token))
            {
                Build(context, token);
                return 6;
            }
            if (Match_EOL(context, token))
            {
                Build(context, token);
                return 7;
            }

            const string stateComment = "State: 5 - Grammar:0>Settings:1>Parameter:2>ParameterValue:0>__alt9:0>#Rule:0";
            token.Detach();
            var expectedTokens = new string[] {"#Comma", "#EOL"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 5;
        }
        
        // Grammar:0>Settings:1>Parameter:3>__grp8:0>#Comma:0
        int MatchTokenAt_6(Token token, ParserContext context)
        {
            if (Match_Rule(context, token))
            {
                Build(context, token);
                return 5;
            }
            if (Match_Token(context, token))
            {
                Build(context, token);
                return 5;
            }
            if (Match_Number(context, token))
            {
                Build(context, token);
                return 5;
            }

            const string stateComment = "State: 6 - Grammar:0>Settings:1>Parameter:3>__grp8:0>#Comma:0";
            token.Detach();
            var expectedTokens = new string[] {"#Rule", "#Token", "#Number"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 6;
        }
        
        // Grammar:0>Settings:1>Parameter:4>#EOL:0
        int MatchTokenAt_7(Token token, ParserContext context)
        {
            if (Match_Rule(context, token))
            {
                EndRule(context, RuleType.Parameter);
                StartRule(context, RuleType.Parameter);
                Build(context, token);
                return 3;
            }
            if (Match_RBracket(context, token))
            {
                EndRule(context, RuleType.Parameter);
                Build(context, token);
                return 8;
            }

            const string stateComment = "State: 7 - Grammar:0>Settings:1>Parameter:4>#EOL:0";
            token.Detach();
            var expectedTokens = new string[] {"#Rule", "#RBracket"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 7;
        }
        
        // Grammar:0>Settings:2>__grp7:0>#RBracket:0
        int MatchTokenAt_8(Token token, ParserContext context)
        {
            if (Match_EOL(context, token))
            {
                Build(context, token);
                return 9;
            }

            const string stateComment = "State: 8 - Grammar:0>Settings:2>__grp7:0>#RBracket:0";
            token.Detach();
            var expectedTokens = new string[] {"#EOL"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 8;
        }
        
        // Grammar:0>Settings:2>__grp7:1>#EOL:0
        int MatchTokenAt_9(Token token, ParserContext context)
        {
            if (Match_Rule(context, token))
            {
                EndRule(context, RuleType.Settings);
                StartRule(context, RuleType.RuleDefinition);
                Build(context, token);
                return 10;
            }

            const string stateComment = "State: 9 - Grammar:0>Settings:2>__grp7:1>#EOL:0";
            token.Detach();
            var expectedTokens = new string[] {"#Rule"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 9;
        }
        
        // Grammar:1>RuleDefinition:0>#Rule:0
        int MatchTokenAt_10(Token token, ParserContext context)
        {
            if (Match_Production(context, token))
            {
                Build(context, token);
                return 11;
            }
            if (Match_LBracket(context, token))
            {
                StartRule(context, RuleType.LookAhead);
                Build(context, token);
                return 12;
            }
            if (Match_Definition(context, token))
            {
                Build(context, token);
                return 19;
            }

            const string stateComment = "State: 10 - Grammar:1>RuleDefinition:0>#Rule:0";
            token.Detach();
            var expectedTokens = new string[] {"#Production", "#LBracket", "#Definition"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 10;
        }
        
        // Grammar:1>RuleDefinition:1>#Production:0
        int MatchTokenAt_11(Token token, ParserContext context)
        {
            if (Match_LBracket(context, token))
            {
                StartRule(context, RuleType.LookAhead);
                Build(context, token);
                return 12;
            }
            if (Match_Definition(context, token))
            {
                Build(context, token);
                return 19;
            }

            const string stateComment = "State: 11 - Grammar:1>RuleDefinition:1>#Production:0";
            token.Detach();
            var expectedTokens = new string[] {"#LBracket", "#Definition"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 11;
        }
        
        // Grammar:1>RuleDefinition:2>LookAhead:0>#LBracket:0
        int MatchTokenAt_12(Token token, ParserContext context)
        {
            if (Match_Token(context, token))
            {
                StartRule(context, RuleType.LookAheadTokenList1);
                Build(context, token);
                return 13;
            }
            if (Match_Arrow(context, token))
            {
                Build(context, token);
                return 15;
            }

            const string stateComment = "State: 12 - Grammar:1>RuleDefinition:2>LookAhead:0>#LBracket:0";
            token.Detach();
            var expectedTokens = new string[] {"#Token", "#Arrow"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 12;
        }
        
        // Grammar:1>RuleDefinition:2>LookAhead:1>LookAheadTokenList1:0>#Token:0
        int MatchTokenAt_13(Token token, ParserContext context)
        {
            if (Match_AlternateOp(context, token))
            {
                Build(context, token);
                return 14;
            }
            if (Match_Arrow(context, token))
            {
                EndRule(context, RuleType.LookAheadTokenList1);
                Build(context, token);
                return 15;
            }

            const string stateComment = "State: 13 - Grammar:1>RuleDefinition:2>LookAhead:1>LookAheadTokenList1:0>#Token:0";
            token.Detach();
            var expectedTokens = new string[] {"#AlternateOp", "#Arrow"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 13;
        }
        
        // Grammar:1>RuleDefinition:2>LookAhead:1>LookAheadTokenList1:1>__grp4:0>#AlternateOp:0
        int MatchTokenAt_14(Token token, ParserContext context)
        {
            if (Match_Token(context, token))
            {
                Build(context, token);
                return 13;
            }

            const string stateComment = "State: 14 - Grammar:1>RuleDefinition:2>LookAhead:1>LookAheadTokenList1:1>__grp4:0>#AlternateOp:0";
            token.Detach();
            var expectedTokens = new string[] {"#Token"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 14;
        }
        
        // Grammar:1>RuleDefinition:2>LookAhead:2>#Arrow:0
        int MatchTokenAt_15(Token token, ParserContext context)
        {
            if (Match_Token(context, token))
            {
                StartRule(context, RuleType.LookAheadTokenList2);
                Build(context, token);
                return 16;
            }
            if (Match_RBracket(context, token))
            {
                Build(context, token);
                return 18;
            }

            const string stateComment = "State: 15 - Grammar:1>RuleDefinition:2>LookAhead:2>#Arrow:0";
            token.Detach();
            var expectedTokens = new string[] {"#Token", "#RBracket"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 15;
        }
        
        // Grammar:1>RuleDefinition:2>LookAhead:3>LookAheadTokenList2:0>#Token:0
        int MatchTokenAt_16(Token token, ParserContext context)
        {
            if (Match_AlternateOp(context, token))
            {
                Build(context, token);
                return 17;
            }
            if (Match_RBracket(context, token))
            {
                EndRule(context, RuleType.LookAheadTokenList2);
                Build(context, token);
                return 18;
            }

            const string stateComment = "State: 16 - Grammar:1>RuleDefinition:2>LookAhead:3>LookAheadTokenList2:0>#Token:0";
            token.Detach();
            var expectedTokens = new string[] {"#AlternateOp", "#RBracket"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 16;
        }
        
        // Grammar:1>RuleDefinition:2>LookAhead:3>LookAheadTokenList2:1>__grp5:0>#AlternateOp:0
        int MatchTokenAt_17(Token token, ParserContext context)
        {
            if (Match_Token(context, token))
            {
                Build(context, token);
                return 16;
            }

            const string stateComment = "State: 17 - Grammar:1>RuleDefinition:2>LookAhead:3>LookAheadTokenList2:1>__grp5:0>#AlternateOp:0";
            token.Detach();
            var expectedTokens = new string[] {"#Token"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 17;
        }
        
        // Grammar:1>RuleDefinition:2>LookAhead:4>#RBracket:0
        int MatchTokenAt_18(Token token, ParserContext context)
        {
            if (Match_Definition(context, token))
            {
                EndRule(context, RuleType.LookAhead);
                Build(context, token);
                return 19;
            }

            const string stateComment = "State: 18 - Grammar:1>RuleDefinition:2>LookAhead:4>#RBracket:0";
            token.Detach();
            var expectedTokens = new string[] {"#Definition"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 18;
        }
        
        // Grammar:1>RuleDefinition:3>#Definition:0
        int MatchTokenAt_19(Token token, ParserContext context)
        {
            if (Match_LParen(context, token))
            {
                if (LookAhead_0(context, token))
                {
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 20;
                }
            }
            if (Match_LParen(context, token))
            {
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.GroupElement);
                Build(context, token);
                return 25;
            }
            if (Match_Token(context, token))
            {
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 50;
            }
            if (Match_Rule(context, token))
            {
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 50;
            }

            const string stateComment = "State: 19 - Grammar:1>RuleDefinition:3>#Definition:0";
            token.Detach();
            var expectedTokens = new string[] {"#LParen", "#Token", "#Rule"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 19;
        }
        
        // Grammar:1>RuleDefinition:4>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:0>#LParen:0
        int MatchTokenAt_20(Token token, ParserContext context)
        {
            if (Match_Rule(context, token))
            {
                Build(context, token);
                return 21;
            }
            if (Match_Token(context, token))
            {
                Build(context, token);
                return 21;
            }

            const string stateComment = "State: 20 - Grammar:1>RuleDefinition:4>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:0>#LParen:0";
            token.Detach();
            var expectedTokens = new string[] {"#Rule", "#Token"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 20;
        }
        
        // Grammar:1>RuleDefinition:4>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:1>AlternateElementBody:0>AlternateElementItem:0>__alt3:0>#Rule:0
        int MatchTokenAt_21(Token token, ParserContext context)
        {
            if (Match_AlternateOp(context, token))
            {
                Build(context, token);
                return 22;
            }
            if (Match_RParen(context, token))
            {
                Build(context, token);
                return 23;
            }

            const string stateComment = "State: 21 - Grammar:1>RuleDefinition:4>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:1>AlternateElementBody:0>AlternateElementItem:0>__alt3:0>#Rule:0";
            token.Detach();
            var expectedTokens = new string[] {"#AlternateOp", "#RParen"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 21;
        }
        
        // Grammar:1>RuleDefinition:4>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:1>AlternateElementBody:1>__grp2:0>#AlternateOp:0
        int MatchTokenAt_22(Token token, ParserContext context)
        {
            if (Match_Rule(context, token))
            {
                Build(context, token);
                return 21;
            }
            if (Match_Token(context, token))
            {
                Build(context, token);
                return 21;
            }

            const string stateComment = "State: 22 - Grammar:1>RuleDefinition:4>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:1>AlternateElementBody:1>__grp2:0>#AlternateOp:0";
            token.Detach();
            var expectedTokens = new string[] {"#Rule", "#Token"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 22;
        }
        
        // Grammar:1>RuleDefinition:4>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:2>#RParen:0
        int MatchTokenAt_23(Token token, ParserContext context)
        {
            if (Match_AnyMultiplier(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 24;
            }
            if (Match_OneOrMoreMultiplier(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 24;
            }
            if (Match_OneOrZeroMultiplier(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 24;
            }
            if (Match_LParen(context, token))
            {
                if (LookAhead_0(context, token))
                {
                EndRule(context, RuleType.AlternateElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 20;
                }
            }
            if (Match_LParen(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.GroupElement);
                Build(context, token);
                return 25;
            }
            if (Match_Token(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 50;
            }
            if (Match_Rule(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 50;
            }
            if (Match_EOL(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 51;
            }

            const string stateComment = "State: 23 - Grammar:1>RuleDefinition:4>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:2>#RParen:0";
            token.Detach();
            var expectedTokens = new string[] {"#AnyMultiplier", "#OneOrMoreMultiplier", "#OneOrZeroMultiplier", "#LParen", "#Token", "#Rule", "#EOL"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 23;
        }
        
        // Grammar:1>RuleDefinition:4>RuleDefinitionElement:1>RuleDefinitionElement_Multiplier:0>__alt1:0>#AnyMultiplier:0
        int MatchTokenAt_24(Token token, ParserContext context)
        {
            if (Match_LParen(context, token))
            {
                if (LookAhead_0(context, token))
                {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 20;
                }
            }
            if (Match_LParen(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.GroupElement);
                Build(context, token);
                return 25;
            }
            if (Match_Token(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 50;
            }
            if (Match_Rule(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 50;
            }
            if (Match_EOL(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 51;
            }

            const string stateComment = "State: 24 - Grammar:1>RuleDefinition:4>RuleDefinitionElement:1>RuleDefinitionElement_Multiplier:0>__alt1:0>#AnyMultiplier:0";
            token.Detach();
            var expectedTokens = new string[] {"#LParen", "#Token", "#Rule", "#EOL"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 24;
        }
        
        // Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:0>#LParen:0
        int MatchTokenAt_25(Token token, ParserContext context)
        {
            if (Match_LParen(context, token))
            {
                if (LookAhead_0(context, token))
                {
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 26;
                }
            }
            if (Match_LParen(context, token))
            {
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.GroupElement);
                Build(context, token);
                return 31;
            }
            if (Match_Token(context, token))
            {
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 48;
            }
            if (Match_Rule(context, token))
            {
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 48;
            }

            const string stateComment = "State: 25 - Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:0>#LParen:0";
            token.Detach();
            var expectedTokens = new string[] {"#LParen", "#Token", "#Rule"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 25;
        }
        
        // Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:0>#LParen:0
        int MatchTokenAt_26(Token token, ParserContext context)
        {
            if (Match_Rule(context, token))
            {
                Build(context, token);
                return 27;
            }
            if (Match_Token(context, token))
            {
                Build(context, token);
                return 27;
            }

            const string stateComment = "State: 26 - Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:0>#LParen:0";
            token.Detach();
            var expectedTokens = new string[] {"#Rule", "#Token"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 26;
        }
        
        // Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:1>AlternateElementBody:0>AlternateElementItem:0>__alt3:0>#Rule:0
        int MatchTokenAt_27(Token token, ParserContext context)
        {
            if (Match_AlternateOp(context, token))
            {
                Build(context, token);
                return 28;
            }
            if (Match_RParen(context, token))
            {
                Build(context, token);
                return 29;
            }

            const string stateComment = "State: 27 - Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:1>AlternateElementBody:0>AlternateElementItem:0>__alt3:0>#Rule:0";
            token.Detach();
            var expectedTokens = new string[] {"#AlternateOp", "#RParen"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 27;
        }
        
        // Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:1>AlternateElementBody:1>__grp2:0>#AlternateOp:0
        int MatchTokenAt_28(Token token, ParserContext context)
        {
            if (Match_Rule(context, token))
            {
                Build(context, token);
                return 27;
            }
            if (Match_Token(context, token))
            {
                Build(context, token);
                return 27;
            }

            const string stateComment = "State: 28 - Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:1>AlternateElementBody:1>__grp2:0>#AlternateOp:0";
            token.Detach();
            var expectedTokens = new string[] {"#Rule", "#Token"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 28;
        }
        
        // Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:2>#RParen:0
        int MatchTokenAt_29(Token token, ParserContext context)
        {
            if (Match_AnyMultiplier(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 30;
            }
            if (Match_OneOrMoreMultiplier(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 30;
            }
            if (Match_OneOrZeroMultiplier(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 30;
            }
            if (Match_LParen(context, token))
            {
                if (LookAhead_0(context, token))
                {
                EndRule(context, RuleType.AlternateElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 26;
                }
            }
            if (Match_LParen(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.GroupElement);
                Build(context, token);
                return 31;
            }
            if (Match_Token(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 48;
            }
            if (Match_Rule(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 48;
            }
            if (Match_RParen(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 49;
            }

            const string stateComment = "State: 29 - Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:2>#RParen:0";
            token.Detach();
            var expectedTokens = new string[] {"#AnyMultiplier", "#OneOrMoreMultiplier", "#OneOrZeroMultiplier", "#LParen", "#Token", "#Rule", "#RParen"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 29;
        }
        
        // Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:1>RuleDefinitionElement_Multiplier:0>__alt1:0>#AnyMultiplier:0
        int MatchTokenAt_30(Token token, ParserContext context)
        {
            if (Match_LParen(context, token))
            {
                if (LookAhead_0(context, token))
                {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 26;
                }
            }
            if (Match_LParen(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.GroupElement);
                Build(context, token);
                return 31;
            }
            if (Match_Token(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 48;
            }
            if (Match_Rule(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 48;
            }
            if (Match_RParen(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 49;
            }

            const string stateComment = "State: 30 - Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:1>RuleDefinitionElement_Multiplier:0>__alt1:0>#AnyMultiplier:0";
            token.Detach();
            var expectedTokens = new string[] {"#LParen", "#Token", "#Rule", "#RParen"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 30;
        }
        
        // Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:0>#LParen:0
        int MatchTokenAt_31(Token token, ParserContext context)
        {
            if (Match_LParen(context, token))
            {
                if (LookAhead_0(context, token))
                {
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 32;
                }
            }
            if (Match_LParen(context, token))
            {
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.GroupElement);
                Build(context, token);
                return 37;
            }
            if (Match_Token(context, token))
            {
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 46;
            }
            if (Match_Rule(context, token))
            {
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 46;
            }

            const string stateComment = "State: 31 - Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:0>#LParen:0";
            token.Detach();
            var expectedTokens = new string[] {"#LParen", "#Token", "#Rule"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 31;
        }
        
        // Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:0>#LParen:0
        int MatchTokenAt_32(Token token, ParserContext context)
        {
            if (Match_Rule(context, token))
            {
                Build(context, token);
                return 33;
            }
            if (Match_Token(context, token))
            {
                Build(context, token);
                return 33;
            }

            const string stateComment = "State: 32 - Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:0>#LParen:0";
            token.Detach();
            var expectedTokens = new string[] {"#Rule", "#Token"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 32;
        }
        
        // Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:1>AlternateElementBody:0>AlternateElementItem:0>__alt3:0>#Rule:0
        int MatchTokenAt_33(Token token, ParserContext context)
        {
            if (Match_AlternateOp(context, token))
            {
                Build(context, token);
                return 34;
            }
            if (Match_RParen(context, token))
            {
                Build(context, token);
                return 35;
            }

            const string stateComment = "State: 33 - Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:1>AlternateElementBody:0>AlternateElementItem:0>__alt3:0>#Rule:0";
            token.Detach();
            var expectedTokens = new string[] {"#AlternateOp", "#RParen"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 33;
        }
        
        // Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:1>AlternateElementBody:1>__grp2:0>#AlternateOp:0
        int MatchTokenAt_34(Token token, ParserContext context)
        {
            if (Match_Rule(context, token))
            {
                Build(context, token);
                return 33;
            }
            if (Match_Token(context, token))
            {
                Build(context, token);
                return 33;
            }

            const string stateComment = "State: 34 - Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:1>AlternateElementBody:1>__grp2:0>#AlternateOp:0";
            token.Detach();
            var expectedTokens = new string[] {"#Rule", "#Token"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 34;
        }
        
        // Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:2>#RParen:0
        int MatchTokenAt_35(Token token, ParserContext context)
        {
            if (Match_AnyMultiplier(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 36;
            }
            if (Match_OneOrMoreMultiplier(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 36;
            }
            if (Match_OneOrZeroMultiplier(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 36;
            }
            if (Match_LParen(context, token))
            {
                if (LookAhead_0(context, token))
                {
                EndRule(context, RuleType.AlternateElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 32;
                }
            }
            if (Match_LParen(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.GroupElement);
                Build(context, token);
                return 37;
            }
            if (Match_Token(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 46;
            }
            if (Match_Rule(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 46;
            }
            if (Match_RParen(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 47;
            }

            const string stateComment = "State: 35 - Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:2>#RParen:0";
            token.Detach();
            var expectedTokens = new string[] {"#AnyMultiplier", "#OneOrMoreMultiplier", "#OneOrZeroMultiplier", "#LParen", "#Token", "#Rule", "#RParen"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 35;
        }
        
        // Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:1>RuleDefinitionElement_Multiplier:0>__alt1:0>#AnyMultiplier:0
        int MatchTokenAt_36(Token token, ParserContext context)
        {
            if (Match_LParen(context, token))
            {
                if (LookAhead_0(context, token))
                {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 32;
                }
            }
            if (Match_LParen(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.GroupElement);
                Build(context, token);
                return 37;
            }
            if (Match_Token(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 46;
            }
            if (Match_Rule(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 46;
            }
            if (Match_RParen(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 47;
            }

            const string stateComment = "State: 36 - Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:1>RuleDefinitionElement_Multiplier:0>__alt1:0>#AnyMultiplier:0";
            token.Detach();
            var expectedTokens = new string[] {"#LParen", "#Token", "#Rule", "#RParen"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 36;
        }
        
        // Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:0>#LParen:0
        int MatchTokenAt_37(Token token, ParserContext context)
        {
            if (Match_LParen(context, token))
            {
                if (LookAhead_0(context, token))
                {
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 38;
                }
            }
            if (Match_LParen(context, token))
            {
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.GroupElement);
                Build(context, token);
                return 43;
            }
            if (Match_Token(context, token))
            {
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 44;
            }
            if (Match_Rule(context, token))
            {
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 44;
            }

            const string stateComment = "State: 37 - Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:0>#LParen:0";
            token.Detach();
            var expectedTokens = new string[] {"#LParen", "#Token", "#Rule"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 37;
        }
        
        // Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:0>#LParen:0
        int MatchTokenAt_38(Token token, ParserContext context)
        {
            if (Match_Rule(context, token))
            {
                Build(context, token);
                return 39;
            }
            if (Match_Token(context, token))
            {
                Build(context, token);
                return 39;
            }

            const string stateComment = "State: 38 - Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:0>#LParen:0";
            token.Detach();
            var expectedTokens = new string[] {"#Rule", "#Token"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 38;
        }
        
        // Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:1>AlternateElementBody:0>AlternateElementItem:0>__alt3:0>#Rule:0
        int MatchTokenAt_39(Token token, ParserContext context)
        {
            if (Match_AlternateOp(context, token))
            {
                Build(context, token);
                return 40;
            }
            if (Match_RParen(context, token))
            {
                Build(context, token);
                return 41;
            }

            const string stateComment = "State: 39 - Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:1>AlternateElementBody:0>AlternateElementItem:0>__alt3:0>#Rule:0";
            token.Detach();
            var expectedTokens = new string[] {"#AlternateOp", "#RParen"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 39;
        }
        
        // Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:1>AlternateElementBody:1>__grp2:0>#AlternateOp:0
        int MatchTokenAt_40(Token token, ParserContext context)
        {
            if (Match_Rule(context, token))
            {
                Build(context, token);
                return 39;
            }
            if (Match_Token(context, token))
            {
                Build(context, token);
                return 39;
            }

            const string stateComment = "State: 40 - Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:1>AlternateElementBody:1>__grp2:0>#AlternateOp:0";
            token.Detach();
            var expectedTokens = new string[] {"#Rule", "#Token"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 40;
        }
        
        // Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:2>#RParen:0
        int MatchTokenAt_41(Token token, ParserContext context)
        {
            if (Match_AnyMultiplier(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 42;
            }
            if (Match_OneOrMoreMultiplier(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 42;
            }
            if (Match_OneOrZeroMultiplier(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 42;
            }
            if (Match_LParen(context, token))
            {
                if (LookAhead_0(context, token))
                {
                EndRule(context, RuleType.AlternateElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 38;
                }
            }
            if (Match_LParen(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.GroupElement);
                Build(context, token);
                return 43;
            }
            if (Match_Token(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 44;
            }
            if (Match_Rule(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 44;
            }
            if (Match_RParen(context, token))
            {
                EndRule(context, RuleType.AlternateElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 45;
            }

            const string stateComment = "State: 41 - Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:0>AlternateElement:2>#RParen:0";
            token.Detach();
            var expectedTokens = new string[] {"#AnyMultiplier", "#OneOrMoreMultiplier", "#OneOrZeroMultiplier", "#LParen", "#Token", "#Rule", "#RParen"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 41;
        }
        
        // Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:1>RuleDefinitionElement_Multiplier:0>__alt1:0>#AnyMultiplier:0
        int MatchTokenAt_42(Token token, ParserContext context)
        {
            if (Match_LParen(context, token))
            {
                if (LookAhead_0(context, token))
                {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 38;
                }
            }
            if (Match_LParen(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.GroupElement);
                Build(context, token);
                return 43;
            }
            if (Match_Token(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 44;
            }
            if (Match_Rule(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 44;
            }
            if (Match_RParen(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 45;
            }

            const string stateComment = "State: 42 - Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:1>RuleDefinitionElement:1>RuleDefinitionElement_Multiplier:0>__alt1:0>#AnyMultiplier:0";
            token.Detach();
            var expectedTokens = new string[] {"#LParen", "#Token", "#Rule", "#RParen"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 42;
        }
        
        // Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:1>TokenElement:0>#Token:0
        int MatchTokenAt_44(Token token, ParserContext context)
        {
            if (Match_AnyMultiplier(context, token))
            {
                Build(context, token);
                return 42;
            }
            if (Match_OneOrMoreMultiplier(context, token))
            {
                Build(context, token);
                return 42;
            }
            if (Match_OneOrZeroMultiplier(context, token))
            {
                Build(context, token);
                return 42;
            }
            if (Match_LParen(context, token))
            {
                if (LookAhead_0(context, token))
                {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 38;
                }
            }
            if (Match_LParen(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.GroupElement);
                Build(context, token);
                return 43;
            }
            if (Match_Token(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 44;
            }
            if (Match_Rule(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 44;
            }
            if (Match_RParen(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 45;
            }

            const string stateComment = "State: 44 - Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:1>TokenElement:0>#Token:0";
            token.Detach();
            var expectedTokens = new string[] {"#AnyMultiplier", "#OneOrMoreMultiplier", "#OneOrZeroMultiplier", "#LParen", "#Token", "#Rule", "#RParen"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 44;
        }
        
        // Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:3>#RParen:0
        int MatchTokenAt_45(Token token, ParserContext context)
        {
            if (Match_AnyMultiplier(context, token))
            {
                EndRule(context, RuleType.GroupElement);
                Build(context, token);
                return 36;
            }
            if (Match_OneOrMoreMultiplier(context, token))
            {
                EndRule(context, RuleType.GroupElement);
                Build(context, token);
                return 36;
            }
            if (Match_OneOrZeroMultiplier(context, token))
            {
                EndRule(context, RuleType.GroupElement);
                Build(context, token);
                return 36;
            }
            if (Match_LParen(context, token))
            {
                if (LookAhead_0(context, token))
                {
                EndRule(context, RuleType.GroupElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 32;
                }
            }
            if (Match_LParen(context, token))
            {
                EndRule(context, RuleType.GroupElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.GroupElement);
                Build(context, token);
                return 37;
            }
            if (Match_Token(context, token))
            {
                EndRule(context, RuleType.GroupElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 46;
            }
            if (Match_Rule(context, token))
            {
                EndRule(context, RuleType.GroupElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 46;
            }
            if (Match_RParen(context, token))
            {
                EndRule(context, RuleType.GroupElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 47;
            }

            const string stateComment = "State: 45 - Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:3>#RParen:0";
            token.Detach();
            var expectedTokens = new string[] {"#AnyMultiplier", "#OneOrMoreMultiplier", "#OneOrZeroMultiplier", "#LParen", "#Token", "#Rule", "#RParen"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 45;
        }
        
        // Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:1>TokenElement:0>#Token:0
        int MatchTokenAt_46(Token token, ParserContext context)
        {
            if (Match_AnyMultiplier(context, token))
            {
                Build(context, token);
                return 36;
            }
            if (Match_OneOrMoreMultiplier(context, token))
            {
                Build(context, token);
                return 36;
            }
            if (Match_OneOrZeroMultiplier(context, token))
            {
                Build(context, token);
                return 36;
            }
            if (Match_LParen(context, token))
            {
                if (LookAhead_0(context, token))
                {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 32;
                }
            }
            if (Match_LParen(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.GroupElement);
                Build(context, token);
                return 37;
            }
            if (Match_Token(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 46;
            }
            if (Match_Rule(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 46;
            }
            if (Match_RParen(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 47;
            }

            const string stateComment = "State: 46 - Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:1>TokenElement:0>#Token:0";
            token.Detach();
            var expectedTokens = new string[] {"#AnyMultiplier", "#OneOrMoreMultiplier", "#OneOrZeroMultiplier", "#LParen", "#Token", "#Rule", "#RParen"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 46;
        }
        
        // Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:3>#RParen:0
        int MatchTokenAt_47(Token token, ParserContext context)
        {
            if (Match_AnyMultiplier(context, token))
            {
                EndRule(context, RuleType.GroupElement);
                Build(context, token);
                return 30;
            }
            if (Match_OneOrMoreMultiplier(context, token))
            {
                EndRule(context, RuleType.GroupElement);
                Build(context, token);
                return 30;
            }
            if (Match_OneOrZeroMultiplier(context, token))
            {
                EndRule(context, RuleType.GroupElement);
                Build(context, token);
                return 30;
            }
            if (Match_LParen(context, token))
            {
                if (LookAhead_0(context, token))
                {
                EndRule(context, RuleType.GroupElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 26;
                }
            }
            if (Match_LParen(context, token))
            {
                EndRule(context, RuleType.GroupElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.GroupElement);
                Build(context, token);
                return 31;
            }
            if (Match_Token(context, token))
            {
                EndRule(context, RuleType.GroupElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 48;
            }
            if (Match_Rule(context, token))
            {
                EndRule(context, RuleType.GroupElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 48;
            }
            if (Match_RParen(context, token))
            {
                EndRule(context, RuleType.GroupElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 49;
            }

            const string stateComment = "State: 47 - Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:3>#RParen:0";
            token.Detach();
            var expectedTokens = new string[] {"#AnyMultiplier", "#OneOrMoreMultiplier", "#OneOrZeroMultiplier", "#LParen", "#Token", "#Rule", "#RParen"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 47;
        }
        
        // Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:1>TokenElement:0>#Token:0
        int MatchTokenAt_48(Token token, ParserContext context)
        {
            if (Match_AnyMultiplier(context, token))
            {
                Build(context, token);
                return 30;
            }
            if (Match_OneOrMoreMultiplier(context, token))
            {
                Build(context, token);
                return 30;
            }
            if (Match_OneOrZeroMultiplier(context, token))
            {
                Build(context, token);
                return 30;
            }
            if (Match_LParen(context, token))
            {
                if (LookAhead_0(context, token))
                {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 26;
                }
            }
            if (Match_LParen(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.GroupElement);
                Build(context, token);
                return 31;
            }
            if (Match_Token(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 48;
            }
            if (Match_Rule(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 48;
            }
            if (Match_RParen(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 49;
            }

            const string stateComment = "State: 48 - Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:2>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:1>TokenElement:0>#Token:0";
            token.Detach();
            var expectedTokens = new string[] {"#AnyMultiplier", "#OneOrMoreMultiplier", "#OneOrZeroMultiplier", "#LParen", "#Token", "#Rule", "#RParen"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 48;
        }
        
        // Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:3>#RParen:0
        int MatchTokenAt_49(Token token, ParserContext context)
        {
            if (Match_AnyMultiplier(context, token))
            {
                EndRule(context, RuleType.GroupElement);
                Build(context, token);
                return 24;
            }
            if (Match_OneOrMoreMultiplier(context, token))
            {
                EndRule(context, RuleType.GroupElement);
                Build(context, token);
                return 24;
            }
            if (Match_OneOrZeroMultiplier(context, token))
            {
                EndRule(context, RuleType.GroupElement);
                Build(context, token);
                return 24;
            }
            if (Match_LParen(context, token))
            {
                if (LookAhead_0(context, token))
                {
                EndRule(context, RuleType.GroupElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 20;
                }
            }
            if (Match_LParen(context, token))
            {
                EndRule(context, RuleType.GroupElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.GroupElement);
                Build(context, token);
                return 25;
            }
            if (Match_Token(context, token))
            {
                EndRule(context, RuleType.GroupElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 50;
            }
            if (Match_Rule(context, token))
            {
                EndRule(context, RuleType.GroupElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 50;
            }
            if (Match_EOL(context, token))
            {
                EndRule(context, RuleType.GroupElement);
                EndRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 51;
            }

            const string stateComment = "State: 49 - Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:3>GroupElement:3>#RParen:0";
            token.Detach();
            var expectedTokens = new string[] {"#AnyMultiplier", "#OneOrMoreMultiplier", "#OneOrZeroMultiplier", "#LParen", "#Token", "#Rule", "#EOL"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 49;
        }
        
        // Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:1>TokenElement:0>#Token:0
        int MatchTokenAt_50(Token token, ParserContext context)
        {
            if (Match_AnyMultiplier(context, token))
            {
                Build(context, token);
                return 24;
            }
            if (Match_OneOrMoreMultiplier(context, token))
            {
                Build(context, token);
                return 24;
            }
            if (Match_OneOrZeroMultiplier(context, token))
            {
                Build(context, token);
                return 24;
            }
            if (Match_LParen(context, token))
            {
                if (LookAhead_0(context, token))
                {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.AlternateElement);
                Build(context, token);
                return 20;
                }
            }
            if (Match_LParen(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.GroupElement);
                Build(context, token);
                return 25;
            }
            if (Match_Token(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 50;
            }
            if (Match_Rule(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                StartRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 50;
            }
            if (Match_EOL(context, token))
            {
                EndRule(context, RuleType.RuleDefinitionElement);
                Build(context, token);
                return 51;
            }

            const string stateComment = "State: 50 - Grammar:1>RuleDefinition:5>RuleDefinitionElement:0>RuleDefinitionElement_Core:0>__alt0:1>TokenElement:0>#Token:0";
            token.Detach();
            var expectedTokens = new string[] {"#AnyMultiplier", "#OneOrMoreMultiplier", "#OneOrZeroMultiplier", "#LParen", "#Token", "#Rule", "#EOL"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 50;
        }
        
        // Grammar:1>RuleDefinition:6>#EOL:0
        int MatchTokenAt_51(Token token, ParserContext context)
        {
            if (Match_EOF(context, token))
            {
                EndRule(context, RuleType.RuleDefinition);
                Build(context, token);
                return 43;
            }
            if (Match_Rule(context, token))
            {
                EndRule(context, RuleType.RuleDefinition);
                StartRule(context, RuleType.RuleDefinition);
                Build(context, token);
                return 10;
            }

            const string stateComment = "State: 51 - Grammar:1>RuleDefinition:6>#EOL:0";
            token.Detach();
            var expectedTokens = new string[] {"#EOF", "#Rule"};
            var error = token.IsEOF ? (ParserException)new UnexpectedEOFException(token, expectedTokens, stateComment) 
                : new UnexpectedTokenException(token, expectedTokens, stateComment);
            if (StopAtFirstError)
                throw error;
            
            AddError(context, error);
            return 51;
        }
        

        bool LookAhead_0(ParserContext context, Token currentToken)
        {
            currentToken.Detach();
            Token token;
            var queue = new Queue<Token>();
            bool match = false;
            do
            {
                token = ReadToken(context);
                token.Detach();
                queue.Enqueue(token);

                if (false
                    || Match_AlternateOp(context, token)
)
                {
                    match = true;
                    break;
                }
            } while (false
                || Match_Token(context, token)
                || Match_Rule(context, token)
);
            foreach(var t in queue)
                context.TokenQueue.Enqueue(t);
            return match;
        }
            }

    public partial interface IAstBuilder<T> 
    {
        void Build(Token token);
        void StartRule(RuleType ruleType);
        void EndRule(RuleType ruleType);
        T GetResult();
        void Reset();
    }

    public partial interface ITokenScanner 
    {
        Token Read();
    }

    public partial interface ITokenMatcher
    {
        bool Match_EOF(Token token);
        bool Match_Rule(Token token);
        bool Match_Token(Token token);
        bool Match_EOL(Token token);
        bool Match_Production(Token token);
        bool Match_Definition(Token token);
        bool Match_LParen(Token token);
        bool Match_RParen(Token token);
        bool Match_LBracket(Token token);
        bool Match_RBracket(Token token);
        bool Match_Arrow(Token token);
        bool Match_AlternateOp(Token token);
        bool Match_AnyMultiplier(Token token);
        bool Match_OneOrMoreMultiplier(Token token);
        bool Match_OneOrZeroMultiplier(Token token);
        bool Match_Comma(Token token);
        bool Match_Number(Token token);
        bool Match_Other(Token token);
        void Reset();
    }


    public partial class SimpleTokenMatcher : ITokenMatcher
    {
        public virtual void Reset() { }
        public virtual bool Match_EOF(Token token) => token.TokenType == TokenType.EOF;
        public virtual bool Match_Rule(Token token) => token.TokenType == TokenType.Rule;
        public virtual bool Match_Token(Token token) => token.TokenType == TokenType.Token;
        public virtual bool Match_EOL(Token token) => token.TokenType == TokenType.EOL;
        public virtual bool Match_Production(Token token) => token.TokenType == TokenType.Production;
        public virtual bool Match_Definition(Token token) => token.TokenType == TokenType.Definition;
        public virtual bool Match_LParen(Token token) => token.TokenType == TokenType.LParen;
        public virtual bool Match_RParen(Token token) => token.TokenType == TokenType.RParen;
        public virtual bool Match_LBracket(Token token) => token.TokenType == TokenType.LBracket;
        public virtual bool Match_RBracket(Token token) => token.TokenType == TokenType.RBracket;
        public virtual bool Match_Arrow(Token token) => token.TokenType == TokenType.Arrow;
        public virtual bool Match_AlternateOp(Token token) => token.TokenType == TokenType.AlternateOp;
        public virtual bool Match_AnyMultiplier(Token token) => token.TokenType == TokenType.AnyMultiplier;
        public virtual bool Match_OneOrMoreMultiplier(Token token) => token.TokenType == TokenType.OneOrMoreMultiplier;
        public virtual bool Match_OneOrZeroMultiplier(Token token) => token.TokenType == TokenType.OneOrZeroMultiplier;
        public virtual bool Match_Comma(Token token) => token.TokenType == TokenType.Comma;
        public virtual bool Match_Number(Token token) => token.TokenType == TokenType.Number;
        public virtual bool Match_Other(Token token) => token.TokenType == TokenType.Other;

    }
    
    public partial class TokenMatcher : SimpleTokenMatcher
    {
    }
}
#pragma warning restore
#endregion
